# First, connects ao the database, and load data
- call: initdb

# Spin the mock
- http.mock:
  params:
    port: 8080
    headers:
      content-type: application/json
    when:
      - uri: /singer/([^/]*).*
        method: get
        call:
          value: -> get
          params:
            singer: ${1}
        response:
          code: ${get.code}
          body: ${get.body}

      - uri: /singer
        method: post
        call:
          value: -> create
          params:
            body: ${body}
        response:
          code: ${create.code}

      - uri: /error/([^/]*)/([^/]*).*
        method: .*
        response:
          code: ${1}
          body: >-
            {
              "error": "${2}"
            }

- pause: forever



# Function : create
- function: create

  steps:
    - display: Body ${body}

    # Extract data from JSON using the JSON Path syntax
    -  display: Name = ${$json.parse(${body}).name}
    -  display: Full name = ${$json.parse(${body}).fullname}
    -  display: Best song = ${$json.parse(${body}).bestsong}
    # You could put those into variables.

    - sql.request:
      params:
        request: insert into rock (id,fullname,bestsong) values('${$json.parse(${body}).name}','${$json.parse(${body}).fullname}','${$json.parse(${body}).bestsong}');

    - return: code = 201


# Function : get
- function: get
  steps:
    - display: Look for ${singer}

    - sql.request:
      params:
        request: select * from rock where id='${singer}'

    - display: "Record found : ${request.0}"

    - type: var
      name: tmp
      value: >-
        {
          "name" : "${request.1}",
          "fullname" : "${request.2}",
          "bestsong" : "${request.3}"
        }

    - type: var
      name: err
      value: >-
        {
          "error" : "Singer ${singer} not found"
        }

    - display: ${request.0}

      # If no line is found, return an error body
    - return: body = ${request.0?${tmp}::${err}}

      # If no line is found, return 404, else 200
    - return: code = ${request.0?200::404}


# Function to initialize the database

- function: initdb
  steps:
  - sql.connect:
    params:
      url: "jdbc:h2:mem:"

  - sql.request:
    params:
      request: >-
        CREATE TABLE rock (
           id VARCHAR(50) NOT NULL,
           fullname VARCHAR(50) NOT NULL,
           bestsong VARCHAR(50) NOT NULL
        );
        insert into rock (id,fullname,bestsong) values('springsteen','Bruce Springsteen aka The Boss','Land of hope and dreams');
        insert into rock (id,fullname,bestsong) values('acdc','AC/DC','Thunderstruck');
